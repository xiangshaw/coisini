spring:
    # 配置中心地址
  application:
    # 服务名称
    name: admin
    # 文件上传下载大小限制
  servlet:
    multipart:
      enabled: true
      max-file-size: 100MB
      max-request-size: 100MB
  # 数据源
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.20.128:3306/coisini_admin?serverTimezone=Asia/Shanghai&allowMultiQueries=true&useSSL=false
    username: root
    password: 123456
    druid: # https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter
      # 连接池的配置信息，初始化大小，最小，最大
      initial-size: 5
      # 最小连接池数量
      min-idle: 5
      # 最大连接池数量
      maxActive: 20
      # 配置获取连接等待超时的时间（毫秒）（缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁）
      maxWait: 60000
      aop-patterns: cn.coisini.* # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      max-evictable-idle-time-millis: 900000
      # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
      # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
      validationQuery: SELECT 1
      # 让连接池知道数据库已经断开了，并且自动测试连接查询
      # 建议配置为true，不影响性能，并且保证安全性。
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      testWhileIdle: true
      # 申请连接时执行validationQuery检测连接是否有效，会降低性能。
      testOnBorrow: false
      # 归还连接时执行validationQuery检测连接是否有效，会降低性能。
      testOnReturn: false
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
      keep-alive: true
      phy-max-use-count: 1000
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      # DruidFilterConfiguration
      filter:
        stat:
          enabled: true
          log-slow-sql: true  # 开启慢查询
          slow-sql-millis: 2000  # 多少秒算慢查询
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      # 配置DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: "/*"  #监控哪些
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"  #排除那些
      # 配置DruidStatViewServlet
      stat-view-servlet:
        # 开启页面访问 http://localhost:9420/druid/index.html
        enabled: true
        # 访问地址
        url-pattern: "/druid/*"
        # IP白名单(没有配置或者为空，则允许所有访问)
        # allow:
        # IP黑名单 (存在共同时，deny优先于allow)
        # deny:
        #  禁用HTML页面上的“Reset All”功能 清空统计数据
        reset-enable: false
        # 登录名
        login-username: coisini
        # 登录密码
        login-password: coisini
  # 环境配置 例如 admin-dev.yaml
  #profiles:
  #  active: dev
  cloud:
    loadbalancer:
      cache:
        enabled: false
    nacos:
      discovery:
        # 开启nacos作为服务注册中心，默认值：true
        enabled: true
        # nacos集群服务注册地址
        server-addr: 192.168.20.128:8999
        # nacos用户名
        username: nacos
        # nacos密码
        password: nacos
        # 命名空间，默认 public,可设置dev,pro等，相同特征的服务分类，先去nacos命名空间创建
        # namespace: public
        # 分组，默认 DEFAULT_GROUP 相同特征的服务划分的更细
        group: DEFAULT_GROUP
        # 临时实例，默认true，false永久实例，即使宕机也不会从nacos服务中删除,可应对雪崩保护，避免服务被删除
        ephemeral: true
        # 权重 1-100 数值越大权重越大分配的流量就越大，通常结合权重负载均衡策略
        weight: 100
      config:
        server-addr: ${spring.cloud.nacos.discovery.server-addr}
        username: ${spring.cloud.nacos.discovery.username}
        password: ${spring.cloud.nacos.discovery.password}
        # dataid为yaml的文件扩展名配置方式 ${spring.application.name}.${file‐extension:properties}
        file-extension: yaml
        # namespace:
        group: DEFAULT_GROUP
        context-path: /nacos
        # 加载多份配置[0][1]...
        extension-configs[0]:
          data-id: admin-sentinel
          group: DEFAULT_GROUP
          refresh: true
          file-extension: json
        # 共享配置
        #shared-configs:
        #  - application-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}

    sentinel:
      eager: true  #是否开启网关限流，默认true
      transport:
        # 添加sentinel的控制台地址
        dashboard: 127.0.0.1:9100
        #指定应用与Sentinel控制台交互的端口，应用本地会起一个该端口占用的HttpServer
        port: 8719
      web-context-unify: false # 默认将调用链路收敛，导致链路流控效果无效
        # 持久化配置
      datasource:
        admin-flow-rule: # 唯一名称可自定义
          nacos:
            # 设置Nacos的连接地址、命名空间和Group ID
            server-addr: ${spring.cloud.nacos.discovery.server-addr}
            username: ${spring.cloud.nacos.discovery.username}
            password: ${spring.cloud.nacos.discovery.password}
            # 设置Nacos中配置文件的命名规则
            dataId: ${spring.application.name}-flow-rules
            groupId: SENTINEL_GROUP
            dataType: json
            # 必填的重要字段，指定当前规则类型是"限流"
            rule-type: flow
# seata配置
seata:
  enabled: true
  # seata应用名
  application-id: ${spring.application.name}
  # 事务分组名
  tx-service-group: ${spring.application.name}-group
  data-source-proxy-mode: AT
  # 开启自动代理
  enable-auto-data-source-proxy: true
  use-jdk-proxy: true
  # 服务配置项
  service:
    # 虚拟组和分组的映射
    vgroup-mapping:
      admin-group: default
  # 从NacosConfig获取配置
#  config:
#    type: nacos
#    nacos:
#      server-addr: ${spring.cloud.nacos.discovery.server-addr}
#      group: SEATA_GROUP
#      namespace:
#      username: nacos
#      password: nacos
  # 服务注册到nacos
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: ${spring.cloud.nacos.discovery.server-addr}
      #namespace:
      username: nacos
      password: nacos
      group: SEATA_GROUP
      cluster: default








